# -*- coding: utf-8 -*-
"""ADM_PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Br2p8Q7tUSvO6ODgxLXuXK9wjKjb4iXI
"""

# Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Load the dataset
df = pd.read_csv("/content/17_student_performance_estimation.csv")  # Update filename if needed
df.columns = df.columns.str.strip()  # Clean column names

# Convert final_grade into categories: Low (0–10), Medium (11–15), High (16–20)
df['Performance'] = pd.cut(df['final_grade'], bins=[-1, 10, 15, 20], labels=['Low', 'Medium', 'High'])

# Encode target
le = LabelEncoder()
df['Performance'] = le.fit_transform(df['Performance'])

# Encode categorical features
df['school_support'] = df['school_support'].map({'yes': 1, 'no': 0})  # Binary encode
df = pd.get_dummies(df, drop_first=True)

# Fill missing values
df.fillna(df.median(numeric_only=True), inplace=True)

# Feature-target split
# Feature-target split
X = df.drop(['final_grade', 'Performance'], axis=1)
y = df['Performance']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
target_labels = [str(label) for label in le.classes_]
print("Accuracy:", round(accuracy_score(y_test, y_pred) * 100), "%")
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=target_labels))


# Feature importance
importances = pd.Series(model.feature_importances_, index=X.columns)
importances.nlargest(10).plot(kind='barh', color='skyblue')
plt.title("Top 10 Feature Importances")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()